<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.project_server.repository.ExamRepository">

    <select id="getExams"
            resultType="com.example.project_server.vo.Exam">
        SELECT C.name AS extra__certName, E.*
        FROM exam E
        JOIN certificate C
        ON E.certId = C.id
        ORDER BY C.name;
    </select>

    <select id="getAutoCompleteExams" parameterType="String"
            resultType="com.example.project_server.vo.Exam">
        SELECT
            MIN(E.id) AS id,
            E.certId,
            E.category,
            MIN(E.examDate) AS examDate,
            MIN(E.regDate) AS regDate,
            MIN(E.updateDate) AS updateDate,
            C.name AS extra__certName
        FROM exam E
                 JOIN certificate C ON E.certId = C.id
        WHERE C.name LIKE CONCAT('%', #{keyword}, '%')
        GROUP BY E.certId, C.name
        ORDER BY C.name;
    </select>

    <select id="getExamCertNames"
            resultType="com.example.project_server.vo.Certificate">
        SELECT DISTINCT C.name AS `name`, C.id AS id
        FROM certificate C
                 JOIN exam E
                      ON C.id = E.certId
        ORDER BY C.name;
    </select>

    <select id="getExamByCertId"
            resultType="com.example.project_server.vo.Exam">
        SELECT E.*, C.name AS extra__certName
        FROM exam E
                 JOIN certificate C
                      ON C.id = E.certId
        WHERE E.certId = #{certId}
        ORDER BY E.examDate DESC;
    </select>

    <!-- Choice 매핑 -->
    <resultMap id="extra__choices" type="com.example.project_server.vo.Choice">
        <id property="id" column="choiceId"/>
        <result property="label" column="label"/>
        <result property="body" column="choiceBody"/>
        <result property="isCorrect" column="isCorrect"/>
    </resultMap>

    <!-- Question + Choice 1:N 매핑 -->
    <resultMap id="QuestionWithChoicesMap" type="com.example.project_server.vo.Question">
        <id property="id" column="id"/>
        <result property="subjectId" column="subjectId"/>
        <result property="questNum" column="questNum"/>
        <result property="body" column="questionBody"/>
        <result property="hasImage" column="hasImage"/>
        <result property="imgUrl" column="imgUrl"/>
        <result property="extra__subjectNum" column="extra__subjectNum"/>
        <result property="extra__subjectName" column="extra__subjectName"/>

        <collection property="extra__choices" ofType="com.example.project_server.vo.Choice" resultMap="extra__choices"/>
    </resultMap>

    <select id="getQuestionsByExamId" resultMap="QuestionWithChoicesMap">
        SELECT Q.id,
               Q.questNum,
               Q.body      AS questionBody,
               Q.hasImage,
               Q.imgUrl,
               CS.subjectNum     AS extra__subjectNum,
               CS.name     AS extra__subjectName,
               C.id        AS choiceId,
               C.label,
               C.body      AS choiceBody,
               C.isCorrect AS isCorrect
        FROM questions Q
                 JOIN (SELECT questId
                       FROM choices
                       GROUP BY questId
                       HAVING COUNT(*) = 4) valid_Q ON Q.id = valid_Q.questId
                 JOIN choices C ON Q.id = c.questId
                 JOIN certSubject CS ON Q.subjectId = CS.id
        WHERE Q.examId = #{examId}
        ORDER BY Q.questNum ASC, C.label ASC
    </select>


    <select id="getRandomQuestionsByCertId" resultMap="QuestionWithChoicesMap">
        SELECT Q.id,
        Q.questNum,
        Q.body      AS questionBody,
        Q.hasImage,
        Q.imgUrl,
        CS.subjectNum     AS extra__subjectNum,
        CS.name     AS extra__subjectName,
        C.id        AS choiceId,
        C.label,
        C.body      AS choiceBody,
        C.isCorrect AS isCorrect
        FROM (
        SELECT Q.*
        FROM questions Q
        JOIN (
        SELECT questId
        FROM choices
        GROUP BY questId
        HAVING COUNT(*) = 4
        ) valid_Q ON Q.ID = valid_Q.questId
        WHERE Q.certId = #{certId}
        ORDER BY RAND()
        <if test="questionCount != 0">
            LIMIT #{questionCount}
        </if>
        ) Q
        JOIN choices C ON Q.ID = C.questId
        JOIN certSubject CS ON Q.subjectId = CS.ID
        ORDER BY Q.questNum, C.label
    </select>

    <insert id="insertMemberExam" parameterType="com.example.project_server.vo.MemberExam">
        INSERT INTO memberExam
        (memberId, certId, examId, elapsedTime, totalQuest, correctQuest, regDate, updateDate)
        VALUES
            (#{memberId}, #{certId}, #{examId}, #{elapsedTime}, #{totalQuest}, #{correctQuest}, NOW(), NOW())
    </insert>

    <select id="getMemberExamByMemberId"
            resultType="com.example.project_server.vo.MemberExam">
        SELECT M.*, C.name AS extra__certName
        FROM memberExam M
                 JOIN certificate C
                      ON M.certId = C.id
        WHERE M.memberId = #{loginedMemberId}
        ORDER BY M.regDate DESC;
    </select>

</mapper>
